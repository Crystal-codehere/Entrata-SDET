
- Here are 5 test ideas for Entrata.com:

1. Navigation Test:

	Navigate to https://www.entrata.com and click on “Products” → assert the title or URL.

2. Form Interaction (No Submission):

	Go to “Contact Us”, fill in a few fields, assert values are set — but don’t submit.

3. Dynamic Content:

	Scroll to the testimonials section or carousel and assert its visibility or changes.

4. Navigation Menu Hover:

	Hover over the main menu and verify submenus appear using Actions class.

5. Footer Link Test:

	Click a footer link like “Privacy Policy” and assert the content or URL is correct.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<dependencies>
  <dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.20.0</version>
  </dependency>
  <dependency>
    <groupId>org.testng</groupId>
    <artifactId>testng</artifactId>
    <version>7.7.0</version>
    <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>io.github.bonigarcia</groupId>
    <artifactId>webdrivermanager</artifactId>
    <version>5.3.2</version>
  </dependency>
</dependencies>

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class EntrataTests extends BaseTest {

  HomePage home;

  @BeforeClass
  public void initPage() {
    home = new HomePage(driver);
  }

  @Test(priority = 1)
  public void testHomeTitleContainsEntrata() {
    driver.get("https://www.entrata.com");
    String title = driver.getTitle();
    Assert.assertTrue(title.contains("Entrata"), "Page title should contain Entrata");
  }

  @Test(priority = 2)
  public void testNavigateToCareersWithoutSubmission() {
    home.clickCareersLink();
    Assert.assertTrue(driver.getCurrentUrl().contains("careers"));
  }

  @Test(priority = 3)
  public void testFillDemoFormFields() {
    home.openDemoForm();
    home.enterDemoName("Test Name");
    home.enterDemoEmail("test@example.com");
    Assert.assertEquals(home.getDemoEmailValue(), "test@example.com");
  }

  @Test(priority = 4)
  public void testDynamicResidentPortalButton() {
    home.waitForResidentPortalButton();
    Assert.assertTrue(home.isResidentPortalVisible());
  }
}


. Used explicit waits (e.g. WebDriverWait) for dynamic elements 
. Avoided calling submit() or clicking an actual submit button.
. Page Object Model (POM) helps maintain clean test code.
. Used clear, context-rich Assert.assertTrue, Assert.assertEquals.

